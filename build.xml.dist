<?xml version="1.0" encoding="UTF-8"?>
<project name="AutoFIT" default="full-build">

	<property name="pdepend" value="/usr/share/.composer/vendor/bin/pdepend" />
	<property name="phpmd" value="/usr/share/.composer/vendor/bin/phpmd" />
	<property name="phpcpd" value="/usr/share/.composer/vendor/bin/phpcpd" />
	<property name="phpcs" value="/usr/share/.composer/vendor/bin/phpcs" />
	<property name="phploc" value="/usr/share/.composer/vendor/bin/phploc" />
	<property name="phpdox" value="/usr/share/.composer/vendor/bin/phpdox" />
	<!--
	<property name="phpunit" value="/usr/share/.composer/vendor/bin/phpunit" />
	<property name="phpunit" value="$COMPOSER_HOME/vendor/bin/phpunit" />
	<property name="phpunit" value="%COMPOSER_HOME%\vendor\bin\phpunit" />
	-->

	<target name="full-build" depends="prepare,static-analysis,phpdox" description="Performs static analysis, runs the tests, and generates project documentation." />
	<target name="prepare" unless="prepare.done" depends="clean" description="Prepare for build">
		<mkdir dir="${basedir}/build/api" />
		<mkdir dir="${basedir}/build/coverage" />
		<mkdir dir="${basedir}/build/logs" />
		<mkdir dir="${basedir}/build/pdepend" />
		<mkdir dir="${basedir}/build/phpdox" />
		<property name="prepare.done" value="true" />
	</target>
	<target name="clean" unless="clean.done" description="Cleanup build artifacts">
		<delete dir="${basedir}/build/api" />
		<delete dir="${basedir}/build/coverage" />
		<delete dir="${basedir}/build/logs" />
		<delete dir="${basedir}/build/pdepend" />
		<delete dir="${basedir}/build/phpdox" />
		<property name="clean.done" value="true" />
	</target>
	<target name="static-analysis">
		<parallel threadCount="2">
			<sequential>
				<antcall target="pdepend" />
				<antcall target="phpmd" />
			</sequential>
			<antcall target="lint" />
			<antcall target="phpcpd" />
			<antcall target="phpcs" />
			<antcall target="phploc" />
		</parallel>
	</target>
	<target name="pdepend" unless="pdepend.done" depends="prepare" description="Calculate software metrics using PHP_Depend and log result in XML format. Intended for usage within a continuous integration environment.">
		<exec executable="${pdepend}" taskname="pdepend">
			<arg value="--jdepend-xml=${basedir}/build/logs/jdepend.xml" />
			<arg value="--jdepend-chart=${basedir}/build/pdepend/dependencies.svg" />
			<arg value="--overview-pyramid=${basedir}/build/pdepend/overview-pyramid.svg" />
			<arg path="${basedir}/module" />
		</exec>
		<property name="pdepend.done" value="true" />
	</target>
	<target name="phpmd" unless="phpmd.done" description="Perform project mess detection using PHPMD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpmd}" taskname="phpmd">
			<arg path="${basedir}/module" />
			<arg value="xml" />
			<arg path="${basedir}/build/phpmd.xml" />
			<arg value="--reportfile" />
			<arg value="${basedir}/build/logs/pmd.xml" />
		</exec>
		<property name="phpmd.done" value="true" />
	</target>
	<target name="lint" unless="lint.done" description="Perform syntax check of sourcecode files">
		<apply executable="php" taskname="lint" failonerror="true">
			<arg value="-l" />
			<fileset dir="${basedir}/module/">
				<include name="**/*.php" />
			</fileset>
			<fileset dir="${basedir}/phpunit/tests">
				<include name="**/*.php" />
			</fileset>
		</apply>
		<property name="lint.done" value="true" />
	</target>
	<target name="phpcpd" unless="phpcpd.done" description="Find duplicate code using PHPCPD and print human readable output. Intended for usage on the command line before committing.">
		<exec executable="${phpcpd}" taskname="phpcpd">
			<arg path="${basedir}/module" />
            <arg value="--log-pmd" />
            <arg value="${basedir}/build/logs/phpcpd.xml" />
		</exec>
		<property name="phpcpd.done" value="true" />
	</target>
	<target name="phpcs" unless="phpcs.done">
		<exec executable="${phpcs}" taskname="phpcs">
			<arg value="--standard=PSR2" />
			<arg value="--extensions=php" />
			<arg value="--ignore=autoload.php" />
			<arg value="--report=checkstyle" />
			<arg value="--report-file=${basedir}/build/logs/checkstyle.xml" />
			<arg path="${basedir}/module/" />
			<arg path="${basedir}/vendor/db-systel/" />
		</exec>
		<property name="phpcs.done" value="true" />
	</target>
	<target name="phpdox" depends="phploc,phpcs,phpmd" unless="phpdox.done" description="Generate project documentation using phpDox">
		<exec executable="${phpdox}" dir="${basedir}/build" taskname="phpdox">
			<arg value="--file" />
			<arg value="${basedir}/build/phpdox.xml" />
		</exec>
		<property name="phpdox.done" value="true" />
	</target>
	<target name="phploc" unless="phploc.done" description="Measure project size using PHPLOC and print human readable output. Intended for usage on the command line.">
		<exec executable="${phploc}" taskname="phploc">
			<arg value="--count-tests" />
			<arg value="--log-csv" />
			<arg value="${basedir}/build/logs/phploc.csv" />
			<arg value="--log-xml" />
			<arg value="${basedir}/build/logs/phploc.xml" />
			<arg path="${basedir}/module" />
			<arg path="${basedir}/phpunit/tests" />
		</exec>
		<property name="phploc.done" value="true" />
	</target>
	<target name="phpunit" description="Run unit tests with PHPUnit">
		<exec executable="${phpunit}" resultproperty="result.phpunit" taskname="phpunit">
			<arg value="--configuration" />
			<arg path="${basedir}/phpunit/phpunit.xml" />
		</exec>
	</target>

</project>
